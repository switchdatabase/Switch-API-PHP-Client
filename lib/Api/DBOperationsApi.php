<?php
/**
 * DBOperationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Switch Database REST API
 *
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DBOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DBOperationsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DBOperationsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addPost
     *
     * Add is used for adding a data object to the list created at Switch DB.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param string $body Your new value JSON. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AddResponse
     */
    public function addPost($api_key, $access_token, $list, $body)
    {
        list($response) = $this->addPostWithHttpInfo($api_key, $access_token, $list, $body);
        return $response;
    }

    /**
     * Operation addPostWithHttpInfo
     *
     * Add is used for adding a data object to the list created at Switch DB.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param string $body Your new value JSON. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AddResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPostWithHttpInfo($api_key, $access_token, $list, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling addPost');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling addPost');
        }
        // verify the required parameter 'list' is set
        if ($list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list when calling addPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addPost');
        }
        // parse inputs
        $resourcePath = "/Add";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($api_key !== null) {
            $headerParams['APIKey'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['AccessToken'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($list !== null) {
            $headerParams['List'] = $this->apiClient->getSerializer()->toHeaderValue($list);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AddResponse',
                '/Add'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AddResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AddResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPost
     *
     * It's used for listing a data added before.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param \Swagger\Client\Model\Body $body Your Switch DB Query. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function listPost($api_key, $access_token, $list, $body)
    {
        list($response) = $this->listPostWithHttpInfo($api_key, $access_token, $list, $body);
        return $response;
    }

    /**
     * Operation listPostWithHttpInfo
     *
     * It's used for listing a data added before.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param \Swagger\Client\Model\Body $body Your Switch DB Query. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPostWithHttpInfo($api_key, $access_token, $list, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling listPost');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling listPost');
        }
        // verify the required parameter 'list' is set
        if ($list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list when calling listPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listPost');
        }
        // parse inputs
        $resourcePath = "/List";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($api_key !== null) {
            $headerParams['APIKey'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['AccessToken'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($list !== null) {
            $headerParams['List'] = $this->apiClient->getSerializer()->toHeaderValue($list);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/List'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setDelete
     *
     * It's used for deleting a data added before at Switch DB.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param string $list_item_id Your list item id. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SetResponse
     */
    public function setDelete($api_key, $access_token, $list, $list_item_id)
    {
        list($response) = $this->setDeleteWithHttpInfo($api_key, $access_token, $list, $list_item_id);
        return $response;
    }

    /**
     * Operation setDeleteWithHttpInfo
     *
     * It's used for deleting a data added before at Switch DB.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param string $list_item_id Your list item id. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDeleteWithHttpInfo($api_key, $access_token, $list, $list_item_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling setDelete');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling setDelete');
        }
        // verify the required parameter 'list' is set
        if ($list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list when calling setDelete');
        }
        // verify the required parameter 'list_item_id' is set
        if ($list_item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list_item_id when calling setDelete');
        }
        // parse inputs
        $resourcePath = "/Set";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($api_key !== null) {
            $headerParams['APIKey'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['AccessToken'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($list !== null) {
            $headerParams['List'] = $this->apiClient->getSerializer()->toHeaderValue($list);
        }
        // header params
        if ($list_item_id !== null) {
            $headerParams['ListItemId'] = $this->apiClient->getSerializer()->toHeaderValue($list_item_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SetResponse',
                '/Set'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setPost
     *
     * It's used for updating a data object that is already added to Switch DB.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param string $list_item_id Your list item id. (required)
     * @param string $body Your new value JSON. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SetResponse
     */
    public function setPost($api_key, $access_token, $list, $list_item_id, $body)
    {
        list($response) = $this->setPostWithHttpInfo($api_key, $access_token, $list, $list_item_id, $body);
        return $response;
    }

    /**
     * Operation setPostWithHttpInfo
     *
     * It's used for updating a data object that is already added to Switch DB.
     *
     * @param string $api_key Your Switch API Key. (required)
     * @param string $access_token Your Access Token. (required)
     * @param string $list Your data list name. (required)
     * @param string $list_item_id Your list item id. (required)
     * @param string $body Your new value JSON. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPostWithHttpInfo($api_key, $access_token, $list, $list_item_id, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling setPost');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling setPost');
        }
        // verify the required parameter 'list' is set
        if ($list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list when calling setPost');
        }
        // verify the required parameter 'list_item_id' is set
        if ($list_item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $list_item_id when calling setPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling setPost');
        }
        // parse inputs
        $resourcePath = "/Set";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($api_key !== null) {
            $headerParams['APIKey'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['AccessToken'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($list !== null) {
            $headerParams['List'] = $this->apiClient->getSerializer()->toHeaderValue($list);
        }
        // header params
        if ($list_item_id !== null) {
            $headerParams['ListItemId'] = $this->apiClient->getSerializer()->toHeaderValue($list_item_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SetResponse',
                '/Set'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
